module e_edge_r_S(datatypes) is

process e_edge_r_S [input, out_pe, out_w, out_n, fail, drop : any](node_loc : Coordinates) is
   loop
      var one_flit : Flit, flit_dest: Coordinates, arb_status : Bool in
	 input(?one_flit);
	 flit_dest := get_dest(one_flit);
	 if (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = j and x = i
	    out_pe(one_flit) -- destination reached
	 elsif (get_y(flit_dest)>get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y > j and x = i
	    -- only north
	    -- Destination is on the north of (i,j). Packet has been detoured after x=i+1.
    	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if
 	 elsif (get_y(node_loc)==1) and (get_x(flit_dest)<get_x(node_loc)) then -- j==1 and x < i
	    -- only west
	    -- This node is right above southeast corner node.
	    -- Destination is on the west or northwest or southwest of (i,j).
	    -- Packet has detoured to y=1.
	    -- Illegal turn.
    	    out_w(?arb_status);
	    if arb_status == false then
	       drop(one_flit)	       
	    else
	       out_w(one_flit)
	    end if
	 elsif (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)<get_x(node_loc)) then -- y = j and x < i
	    -- only west
	    -- Destination is on the west of (i,j). Packet has detoured at the last step.
	    -- Illegal turn.
    	    out_w(?arb_status);
	    if arb_status == false then
	       drop(one_flit)	       
	    else
	       out_w(one_flit)
	    end if
	 end if
      end var
   end loop
end process

end module