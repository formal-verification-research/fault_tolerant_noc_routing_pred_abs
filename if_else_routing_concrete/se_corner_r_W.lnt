module se_corner_r_W(datatypes, route_concrete) is

process se_corner_r_W [input, out_ip, out_n, out_w, fail, drop : any] (node_loc : Coordinates) is
   loop
      var one_flit : Flit, flit_dest : Coordinates, arb_status : Bool in	
	 input(?one_flit);
	 flit_dest := get_dest(one_flit);
	 if (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y=j and x=i
	    out_ip(one_flit) -- destination reached
	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = (j+1) and x = i
	    -- north first, then west (west is illegal turn)
	    route_concrete[out_n, out_w, drop](one_flit)
	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)==get_x(node_loc)) then -- y > (j+1) and x = i
	    -- only north 
	    -- Destination is on the north of
            -- (i,j) for more than one node away.
            -- Packet has detoured on positive phase
	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)
	    else
	       out_n(one_flit)
	    end if
   	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)<get_x(node_loc)) then -- y = (j+1) and x < i
	    -- only north
	    -- Destination is on the northwest of
            -- (i,j) and packet has been detoured at the last step.
	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)
	    else
	       out_n(one_flit)
	    end if
	 end if		 
      end var        
   end loop

end process -- se_corner_r_W

end module -- se_corner_r_W
