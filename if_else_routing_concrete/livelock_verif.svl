% DEFAULT_PROCESS_FILE="livelock_verif.lnt"
% DEFAULT_SMART_LIMIT=5

"livelock_verif.bcg" = smart divbranching reduction of

   total hide using "vis_none2.hid" in
   par

   -- ***** NODE 01 ****** --

      PEr_Sa_01, PEr_Na_01, PEr_Ea_01 ->
         w_edge_r_PE[PEr_Sa_01, PEr_Na_01, PEr_Ea_01, fail_PEr_01](Coordinates(0 of NodeRange, 1 of NodeRange))
   ||
      n00_n01, Sr_PEa_01, Sr_Sa_01, Sr_Na_01, Sr_Ea_01 -> (* one illegal turn *)
         w_edge_r_S[n00_n01, Sr_PEa_01, Sr_Sa_01, Sr_Na_01, Sr_Ea_01, fail_Sr_01, drop_Sr_01](Coordinates(0 of NodeRange, 1 of NodeRange))
   ||
      n02_n01, Nr_PEa_01, Nr_Sa_01, Nr_Ea_01 -> (* no illegal turn *)
         w_edge_r_N[n02_n01, Nr_PEa_01, Nr_Sa_01, Nr_Ea_01, fail_Nr_01](Coordinates(0 of NodeRange, 1 of NodeRange))
   ||
      n11_n01, Er_PEa_01, Er_Sa_01, Er_Na_01, Er_Ea_01 -> (* no illegal turn *)
         w_edge_r_E[n11_n01, Er_PEa_01, Er_Sa_01, Er_Na_01, Er_Ea_01, fail_Er_01](Coordinates(0 of NodeRange, 1 of NodeRange))
   ||
      Sr_PEa_01, Nr_PEa_01, Er_PEa_01 ->
         arb_PE_3_in[Sr_PEa_01, Nr_PEa_01, Er_PEa_01]
   ||
      PEr_Sa_01, Nr_Sa_01, Er_Sa_01, Sr_Sa_01, n01_n00 ->
         arb_4_in_1_nack[PEr_Sa_01, Nr_Sa_01, Er_Sa_01, Sr_Sa_01, n01_n00]
   ||
      PEr_Na_01, Sr_Na_01, Er_Na_01, n01_n02 ->
         arb_3_in[PEr_Na_01, Sr_Na_01, Er_Na_01, n01_n02]
   ||
      PEr_Ea_01, Sr_Ea_01, Nr_Ea_01, Er_Ea_01, n01_n11->
         arb_4_in[PEr_Ea_01, Sr_Ea_01, Nr_Ea_01, Er_Ea_01, n01_n11]     
 (* Auxiliary processes for Node 01 modeling its environment *)
   ||
      n00_n01 ->
	 pkt_producer[n00_n01]
   ||
      n11_n01 ->
	 pkt_producer[n11_n01]
   ||
      n02_n01 ->
	 pkt_producer[n02_n01]

   -- ***** NODE 02 ****** --

   ||
      n12_n02, Er_PEa_02, Er_Sa_02, Er_Ea_02 ->
	 nw_corner_r_E[n12_n02, Er_PEa_02, Er_Sa_02, Er_Ea_02, fail_Er_02](Coordinates(0 of NodeRange, 2 of NodeRange))
   ||
      n01_n02, Sr_PEa_02, Sr_Ea_02 ->
         nw_corner_r_S[n01_n02, Sr_PEa_02, Sr_Sa_02, Sr_Ea_02, fail_Sr_02, drop_Sr_02](Coordinates(0 of NodeRange, 2 of NodeRange))
   ||
      PEr_Sa_02, PEr_Ea_02 ->
         nw_corner_r_PE[PEr_Sa_02, PEr_Ea_02, fail_PEr_02](Coordinates(0 of NodeRange, 2 of NodeRange))
   ||
      Sr_PEa_02, Er_PEa_02 ->
         arb_PE_2_in[Sr_PEa_02, Er_PEa_02]
   ||
      PEr_Sa_02, Er_Sa_02, n02_n01 ->
         arb_2_in_1_nack[PEr_Sa_02, Er_Sa_02, n02_n01]
   ||
      PEr_Ea_02, Sr_Ea_02, Er_Ea_02, n02_n12 ->
         arb_3_in[PEr_Ea_02, Sr_Ea_02, Er_Ea_02, n02_n12]	    
 (* Auxiliary processes for Node 02 modeling its environment *)
   ||
      n12_n02 ->
	 pkt_producer[n12_n02]
   ||
      n01_n02 ->
	 pkt_producer[n01_n02]

   -- ***** NODE 11 ****** --

   ||
      PEr_Wa_11, PEr_Sa_11, PEr_Na_11, PEr_Ea_11 ->
         center_r_PE[PEr_Wa_11, PEr_Sa_11, PEr_Na_11, PEr_Ea_11, fail_PEr_11](Coordinates(1 of NodeRange, 1 of NodeRange))
   ||
      n01_n11, Wr_PEa_11, Wr_Sa_11, Wr_Na_11, Wr_Ea_11 -> (* r_W_11, one illegal turn *)
         center_r_W[n01_n11, Wr_PEa_11, Wr_Sa_11, Wr_Na_11, Wr_Ea_11, fail_Wr_11, drop_Wr_11](Coordinates(1 of NodeRange, 1 of NodeRange))
   ||
      n10_n11, Sr_PEa_11, Sr_Wa_11, Sr_Na_11, Sr_Ea_11 -> (* r_S_11, one illegal turn *)
         center_r_S[n10_n11, Sr_PEa_11, Sr_Wa_11, Sr_Na_11, Sr_Ea_11, fail_Sr_11, drop_Sr_11](Coordinates(1 of NodeRange, 1 of NodeRange))
   ||
      n12_n11, Nr_PEa_11, Nr_Wa_11, Nr_Sa_11, Nr_Ea_11 -> (* r_N_11, no illegal turn *)
         center_r_N[n12_n11, Nr_PEa_11, Nr_Wa_11, Nr_Sa_11, Nr_Ea_11, fail_Nr_11](Coordinates(1 of NodeRange, 1 of NodeRange))
   ||
      n21_n11, Er_PEa_11, Er_Wa_11, Er_Sa_11, Er_Na_11 -> (* r_E_11, no illegal turn *)
         center_r_E[n21_n11, Er_PEa_11, Er_Wa_11, Er_Sa_11, Er_Na_11, fail_Er_11](Coordinates(1 of NodeRange, 1 of NodeRange))
   ||
      Wr_PEa_11, Sr_PEa_11, Nr_PEa_11, Er_PEa_11 ->
         arb_PE_4_in[Wr_PEa_11, Sr_PEa_11, Nr_PEa_11, Er_PEa_11]
   ||
      PEr_Wa_11, Nr_Wa_11, Er_Wa_11, Sr_Wa_11, n11_n01 ->
         arb_4_in_1_nack[PEr_Wa_11, Nr_Wa_11, Er_Wa_11, Sr_Wa_11, n11_n01]
   ||
      PEr_Sa_11, Nr_Sa_11, Er_Sa_11, Wr_Sa_11, n11_n10 ->
         arb_4_in_1_nack[PEr_Sa_11, Nr_Sa_11, Er_Sa_11, Wr_Sa_11, n11_n10]
   ||
      PEr_Na_11, Wr_Na_11, Sr_Na_11, Er_Na_11, n11_n12 ->
         arb_4_in[PEr_Na_11, Wr_Na_11, Sr_Na_11, Er_Na_11, n11_n12]
   ||
      PEr_Ea_11, Wr_Ea_11, Sr_Ea_11, Nr_Ea_11, n11_n21 ->
         arb_4_in[PEr_Ea_11, Wr_Ea_11, Sr_Ea_11, Nr_Ea_11, n11_n21]
 (* Auxiliary processes for Node 11 modeling its environment *)
   ||
      n01_n11 ->
	 pkt_producer[n01_n11]
   ||
      n10_n11 ->
	 pkt_producer[n10_n11]
   ||
      n12_n11 ->
	 pkt_producer[n12_n11]
   ||
      n21_n11 ->
	 pkt_producer[n21_n11]

   -- ***** NODE 12 ****** --

   ||
      PEr_Wa_12, PEr_Sa_12, PEr_Ea_12 ->
        n_edge_r_PE[PEr_Wa_12, PEr_Sa_12, PEr_Ea_12, fail_PEr_12](Coordinates(1 of NodeRange, 2 of NodeRange))
   ||
      n02_n12, Wr_PEa_12, Wr_Sa_12, Wr_Ea_12 -> (* one illegal turn *)
        n_edge_r_W[n02_n12, Wr_PEa_12, Wr_Sa_12, Wr_Ea_12, drop_Wr_12](Coordinates(1 of NodeRange, 2 of NodeRange))
   ||
      n11_n12, Sr_PEa_12, Sr_Wa_12, Sr_Sa_12, Sr_Ea_12 -> (* two illegal turns *)
        n_edge_r_S[n11_n12, Sr_PEa_12, Sr_Wa_12, Sr_Sa_12, Sr_Ea_12, fail_Sr_12, drop_Sr_12](Coordinates(1 of NodeRange, 2 of NodeRange))
   ||
      n22_n12, Er_PEa_12, Er_Wa_12, Er_Sa_12 -> (* no illegal turn *)
        n_edge_r_E[n22_n12, Er_PEa_12, Er_Wa_12, Er_Sa_12, fail_Er_12](Coordinates(1 of NodeRange, 2 of NodeRange))
   ||
      Wr_PEa_12, Sr_PEa_12, Er_PEa_12 ->
        arb_PE_3_in[Wr_PEa_12, Sr_PEa_12, Er_PEa_12]
   ||
      PEr_Wa_12, Sr_Wa_12, Er_Wa_12, n12_n02 ->
        arb_3_in[PEr_Wa_12, Sr_Wa_12, Er_Wa_12, n12_n02]
   ||
      PEr_Sa_12, Er_Sa_12, Wr_Sa_12, Sr_Sa_12, n12_n11 ->
        arb_4_in_2_nack[PEr_Sa_12, Er_Sa_12, Wr_Sa_12, Sr_Sa_12, n12_n11]
   ||
      PEr_Ea_12, Wr_Ea_12, Sr_Ea_12, n12_n22->
        arb_3_in[PEr_Ea_12, Wr_Ea_12, Sr_Ea_12, n12_n22]
 (* Auxiliary processes for Node 12 modeling its environment *)
   ||
      n22_n12 ->
	 pkt_producer[n22_n12]
   ||
      n11_n12 ->
	 pkt_producer[n11_n12]
   ||
      n02_n12 ->
	 pkt_producer[n02_n12]

   
   end par;
