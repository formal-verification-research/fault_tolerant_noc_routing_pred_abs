module e_edge_r_W(datatypes, route_concrete) is

process e_edge_r_W [input, out_pe, out_w, out_s, out_n, fail, drop : any](node_loc : Coordinates) is
   loop
      var one_flit : Flit, flit_dest: Coordinates, arb_status : Bool in
	 input(?one_flit);
	 flit_dest := get_dest(one_flit);
	 if (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = j and x = i
	    out_pe(one_flit) -- destination reached
	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = (j+1) and x = i
	    -- first north, then west
	    -- Destination is right above (i,j).
	    -- Source is NW and packet on positive phase, or source is SW (y=j+2),
	    -- and packet detoured when going E and one step left.
	    route_concrete[out_n, out_w, drop](one_flit)
	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)==get_x(node_loc)) then -- y > (j+1) and x = i
	    -- only north
	    -- Destination is on the north of (i,j) and packet has detoured when going N at x=i-1.
    	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if
	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)<get_x(node_loc)) then -- y = (j+1) and x < i
	    -- only north
	    -- Destination is on the northwest of (i,j) and packet has been detoured at the last step.
    	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if
	 elsif (get_y(flit_dest)>get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y > j and x = i	    
	    -- only north
	    -- Destination is on the north of (i,j) and packet has detoured.
       	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if
	 elsif (get_y(flit_dest)<get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y < j and x = i
	    -- only south
	    -- Destination is on the south of (i,j) and packet has detoured to x=1.
	    -- Illegal turn.
    	    out_s(?arb_status);
	    if arb_status == false then
	       drop(one_flit)	       
	    else
	       out_s(one_flit)
	    end if
	 end if
      end var
   end loop
end process

end module