module center_r_S(datatypes, route_concrete) is

process center_r_S [input, out_ip, out_w, out_n, out_e, fail, drop : any](node_loc : Coordinates) is
   loop
      var one_flit : Flit, flit_dest: Coordinates, arb_status : Bool in
	 input(?one_flit);
	 flit_dest := get_dest(one_flit);
	 if (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = j and x = i
	    out_ip(one_flit) -- destination reached
	 elsif (get_y(flit_dest)>get_y(node_loc)) and (get_x(flit_dest)==(get_x(node_loc)+1)) then -- y > j and x = (i+1)
	    -- first north, then east
	    route_concrete[out_n, out_e, fail](one_flit)
	 elsif (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)==(get_x(node_loc)+1)) then -- y = j and x = (i+1)
	    -- first east, then north
	    route_concrete[out_e, out_n, fail](one_flit)
	 elsif (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)>(get_x(node_loc)+1)) then -- y = j and x > (i+1)
	    -- only east
	    -- Destination is on the east of (i,j), and is more than one column away.
	    -- Packet starts to go north meaning it was diverted from going east. 
	    out_e(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_e(one_flit)
	    end if
	 elsif (get_y(flit_dest)>get_y(node_loc)) and (get_x(flit_dest)>(get_x(node_loc)+1)) then -- y > j and x > (i+1)
	   -- only east
	   -- Destination is on the northeast of (i,j). Packet has detoured before x=i+1.
	    out_e(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_e(one_flit)
	    end if
         elsif (get_y(flit_dest)>get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y > j and x = i
	    -- only north
	    -- Destination is on the north of (i,j) and packet detoured after x=i-1.
	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if
	 elsif (get_y(node_loc)==1) and (get_y(flit_dest)<get_y(node_loc)) and (get_x(flit_dest)>get_x(node_loc)) then -- y = 1 and y < j and x > i
	    -- east only
	    -- special case: Routing node is right above the south edge. Destination is on the southeast of (i,j).
	    -- Packet has detoured to y=1.
    	    out_e(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_e(one_flit)
	    end if	 
	 elsif (get_y(node_loc)==1) and (get_x(flit_dest)<get_x(node_loc)) then -- y = 1 and x < i
	    -- west only
	    -- special case: Routing node is right above the south edge. Destination is on the northwest, west or southwest
            -- of (i,j). Packet has detoured to y=1.
            -- Illegal turn.
	    out_w(?arb_status);
	    if arb_status == false then
	       drop(one_flit)	       
	    else
	       out_w(one_flit)
	    end if
         elsif (get_y(flit_dest)>=get_y(node_loc)) and (get_x(flit_dest)<get_x(node_loc)) then -- y >= j and x < i
	    -- west only
	    -- Destination is on the west or northwest of (i,j) and packet detoured at the last step.
	    out_w(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_w(one_flit)
	    end if
	 elsif (get_y(flit_dest)<get_y(node_loc)) and (get_x(flit_dest)==(get_x(node_loc)+1)) then -- y < j and x = (i+1)
	     -- east only 
	     -- Destination is on the southeast of (i,j) and is one column to the east of (i,j). 
             -- Packet has detoured at the last step.
            out_e(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_e(one_flit)
	    end if
	 end if
      end var
   end loop
end process

end module