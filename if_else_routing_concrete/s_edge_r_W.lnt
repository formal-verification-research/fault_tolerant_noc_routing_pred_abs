module s_edge_r_W(datatypes, route_concrete) is

process s_edge_r_W [input, out_pe, out_n, out_e, fail : any](node_loc : Coordinates) is
   loop
      var one_flit : Flit, flit_dest : Coordinates, arb_status : Bool in
	 input(?one_flit);
	 flit_dest := get_dest(one_flit);
 	 if (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = j and x = i
	    out_pe(one_flit) -- destination reached
 	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)>get_x(node_loc)) then -- y = (j+1) and x > i
	    -- first east, then north
	    route_concrete[out_e, out_n, fail](one_flit)
 	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = (j+1) and x = i
	    -- first north, then east
	    route_concrete[out_n, out_e, fail](one_flit)
 	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)==get_x(node_loc)) then -- y > (j+1) and x = i
	    -- only north
	    -- Destination is on the north of (i,j) and is more than one step
            -- from (i,j). Packet has detoured on positive phase.
	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if
	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)<get_x(node_loc)) then -- y = (j+1) and x < i
	    -- first north, then east
	    -- Destination is on the is on the northwest of (i,j).
            -- Packet has detoured at the last step.
	    route_concrete[out_n, out_e, fail](one_flit)
	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)<get_x(node_loc)) then -- y > (j+1) and x < i
	    -- first north, then east
	    -- Destination is on the northwest and packet has detoured.  
	    route_concrete[out_n, out_e, fail](one_flit)
	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)==(get_x(node_loc)+1)) then -- y > (j+1) and x = (i+1)
	    -- first north, then east
	    route_concrete[out_n, out_e, fail](one_flit)
	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)>(get_x(node_loc)+1)) then -- y > (j+1) and x > (i+1)
	    -- first east, then north
	    route_concrete[out_e, out_n, fail](one_flit)
	 elsif (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)>get_x(node_loc)) then -- y = j and x > i
	    -- first east, then north
	    route_concrete[out_e, out_n, fail](one_flit)
	 end if
      end var
   end loop
end process

end module