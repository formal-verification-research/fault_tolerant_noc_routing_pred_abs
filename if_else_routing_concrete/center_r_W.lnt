module center_r_W(datatypes, route_concrete) is

process center_r_W [input, out_ip, out_s, out_n, out_e, fail, drop : any](node_loc : Coordinates) is
   loop
      var one_flit : Flit, flit_dest: Coordinates, arb_status : Bool in
	 input(?one_flit);
	 flit_dest := get_dest(one_flit);
	 if (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = j and x = i
	    out_ip(one_flit) -- destination reached
	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)>get_x(node_loc)) then -- y = (j+1) and x > i
	    -- first east, then north
	    route_concrete[out_e, out_n, fail](one_flit)
	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)==get_x(node_loc)) then -- y = (j+1) and x = i
	    -- first north, then east
	    route_concrete[out_n, out_e, fail](one_flit)
	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)==get_x(node_loc)) then -- y > (j+1) and x = i
	    -- only north
	    -- Destination is on the north of (i,j) and is more than one row away
            -- from (i,j). Packet has detoured once already.
            out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if	 
	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)==(get_x(node_loc)+1)) then -- y > (j+1) and x = (i+1)
	    -- first north, then east
	    -- Destination is on the northeast of (i,j). Packet has reached x=i+1.
	    route_concrete[out_n, out_e, fail](one_flit)
	 elsif (get_y(flit_dest)>(get_y(node_loc)+1)) and (get_x(flit_dest)>(get_x(node_loc)+1)) then -- y > (j+1) and x > (i+1)
    	    -- first east, then north
	    route_concrete[out_e, out_n, fail](one_flit)
	 elsif (get_y(flit_dest)==get_y(node_loc)) and (get_x(flit_dest)>get_x(node_loc)) then -- y = j and x > i
	    -- only east
	    -- Destination is on the east of (i,j) and packet has detoured.
	    out_e(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_e(one_flit)
	    end if
	 elsif (get_y(flit_dest)==(get_y(node_loc)+1)) and (get_x(flit_dest)<get_x(node_loc)) then -- y = (j+1) and x < i
	    -- only north
	    -- Destination is on the northwest of (i,j) and is one row above (i,j). Packet has detoured at the last step.
    	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if
	 elsif (get_y(flit_dest)<get_y(node_loc)) then -- y < j
	    -- Destination is on the southeast, south, or southwest of (i,j) and packet has detoured at the
            -- last step. Illegal turn.
    	    out_s(?arb_status);
	    if arb_status == false then
	       drop(one_flit)	       
	    else
	       out_s(one_flit)
	    end if
	 elsif (get_y(flit_dest)>get_y(node_loc)) and (get_x(flit_dest)==1) then -- y > j and i = 1
	    -- only north
	    -- special case: This node is on the column that is one step east to the west edge.
            -- Destination is on the northwest of (i,j) and packet has detoured from W edge.
      	    out_n(?arb_status);
	    if arb_status == false then
	       fail(one_flit)	       
	    else
	       out_n(one_flit)
	    end if
	 end if
      end var
   end loop
end process

end module