module nw_corner_r_S(datatypes, route_concrete) is

process nw_corner_r_S [input, out_pe, out_s, out_e, fail, drop : any] (node_loc : Coordinates) is
   loop
      var one_flit : Flit, flit_p : Bool, flit_q : Bool, flit_r : Bool, arb_status : Bool in
	 input(?one_flit);

     flit_p := get_p(one_flit); -- x > 1
     flit_q := get_q(one_flit); -- y > 1
     flit_r := get_r(one_flit); -- x < 1

     if (flit_r) and (flit_q) then
	    -- destination reached
	    out_pe(one_flit)
     elsif (flit_q) and (not(flit_p)) and (not(flit_r)) then
	    -- first east, then south
	    route_concrete[out_e, out_s, drop](one_flit)
     elsif ((flit_q) and (flit_p)) or ((not(flit_q)) and (not(flit_r))) then
	    -- only east	    
	    -- Destination is on the east (more than one node away to
	    -- the east) of (i,j), and the packet has detoured once.
	    out_e(?arb_status);
	    if arb_status == false then
	       fail(one_flit)
	    else
	       out_e(one_flit)
	    end if
	    -- the case below is covered by the one above.
	 (* elsif (get_y(flit_dest)<get_y(node_loc)) and (get_x(flit_dest)==(get_x(node_loc)+1)) then -- y < j and x = (i+1) *)
	 (*    -- Destination is on the southeast of (i,j) *)
	 (*    -- and is only one step away from (i,j). *)
	 (*    -- The packet has detoured at the last step. *)
	 (*    -- only east *)
	 (*    out_e(?arb_status); *)
	 (*    if arb_status == false then *)
	 (*       fail(one_flit) *)
	 (*    else *)
	 (*       out_e(one_flit) *)
	 (*    end if *)	    
	 end if	
      end var      
   end loop
end process -- nw_corner_r_S

end module -- nw_corner_r_S
