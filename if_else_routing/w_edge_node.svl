% DEFAULT_PROCESS_FILE="w_edge_node.lnt"


% SVL_PRINT_MESSAGE "============= Compose all modules ============="

% DEFAULT_SMART_LIMIT=5

"w_edge_node.bcg" = smart divbranching reduction of

   par
      PEr_Sa_01, PEr_Na_01, PEr_Ea_01 -> (* r_PE_01, no illegal turn *)
        w_edge_r_PE[PEr_Sa_01, PEr_Na_01, PEr_Ea_01, fail_PEr_01](Coordinates(0 of NodeRange, 1 of NodeRange))   
   ||
      n00_n01, Sr_PEa_01, Sr_Sa_01, Sr_Na_01, Sr_Ea_01 -> (* r_S_01, one illegal turn *)
        w_edge_r_S[n00_n01, Sr_PEa_01, Sr_Sa_01, Sr_Na_01, Sr_Ea_01, fail_Sr_01, drop_Sr_01](Coordinates(0 of NodeRange, 1 of NodeRange))
   ||
      n02_n01, Nr_PEa_01, Nr_Sa_01, Nr_Ea_01 -> (* r_N_01, no illegal turn *)
        w_edge_r_N[n02_n01, Nr_PEa_01, Nr_Sa_01, Nr_Ea_01, fail_Nr_01](Coordinates(0 of NodeRange, 1 of NodeRange))
   ||
      n11_n01, Er_PEa_01, Er_Sa_01, Er_Na_01, Er_Ea_01 -> (* r_E_01, no illegal turn *)
        w_edge_r_E[n11_n01, Er_PEa_01, Er_Sa_01, Er_Na_01, Er_Ea_01, fail_Er_01](Coordinates(0 of NodeRange, 1 of NodeRange))
   ||
      Sr_PEa_01, Nr_PEa_01, Er_PEa_01 -> (* arb_PE_01 *) 
        arb_PE_3_in[Sr_PEa_01, Nr_PEa_01, Er_PEa_01]
   ||
      PEr_Sa_01, Nr_Sa_01, Er_Sa_01, Sr_Sa_01, n01_n00 -> (* arb_S_01 *)
        arb_4_in_1_nack[PEr_Sa_01, Nr_Sa_01, Er_Sa_01, Sr_Sa_01, n01_n00]
   ||
      PEr_Na_01, Sr_Na_01, Er_Na_01, n01_n02 -> (* arb_N_01 *)
        arb_3_in[PEr_Na_01, Sr_Na_01, Er_Na_01, n01_n02]
   ||
      PEr_Ea_01, Sr_Ea_01, Nr_Ea_01, Er_Ea_01, n01_n11-> (* arb_E_01 *)
        arb_4_in[PEr_Ea_01, Sr_Ea_01, Nr_Ea_01, Er_Ea_01, n01_n11]     
 (* Auxiliary processes for Node 01 modeling its environment *)
   ||
      n00_n01 ->
	 pkt_producer[n00_n01]
   ||
      n11_n01 ->
	 pkt_producer[n11_n01]
   ||
      n02_n01 ->
	 pkt_producer[n02_n01]
   end par;
