module e_edge_r_N(datatypes, route_concrete) is

process e_edge_r_N [input, out_pe, out_w, out_s, fail : any](node_loc : Coordinates) is
   loop
      var one_flit : Flit, flit_p : Bool, flit_q : Bool, flit_r : Bool, flit_s : Bool in
	 input(?one_flit);

     flit_p := get_p(one_flit); -- x > 1
     flit_q := get_q(one_flit); -- y > 1
     flit_r := get_r(one_flit); -- x < 1
     flit_s := get_s(one_flit); -- y < 1

     if (flit_p == true) and (flit_q == false) and (flit_s == false) then
	    out_pe(one_flit) -- destination reached
     elsif (flit_s == true) and (flit_p == false) then
	    -- first south, then west
	    route_concrete[out_s, out_w, fail](one_flit)
     elsif (flit_s == true) and (flit_p == true) then
	    -- first south, then west
	    route_concrete[out_s, out_w, fail](one_flit)
     elsif (flit_q == false) and (flit_s == false) and (flit_p == false) then
	    -- first west, then south	    
	    route_concrete[out_w, out_s, fail](one_flit)
	 elsif (get_y(flit_dest)>get_y(node_loc)) and (get_x(flit_dest)<=get_x(node_loc)) then -- y > j and x <= i
     elsif (flit_q == true) and (flit_p == false) then
	    -- first west, then south	    
	    route_concrete[out_w, out_s, fail](one_flit)
     elsif (flit_q == true) and (flit_p == true) then
	    -- first west, then south	    
	    route_concrete[out_w, out_s, fail](one_flit)
	 end if
      end var
   end loop
end process

end module
